{"id": "395", "K": 1, "temperature": 0.75, "task_id": "395", "task_description": "Write a method in Dafny to find the first non-repeated character in a given string.", "model": "gpt-4", "response": "```dafny\n\nmethod firstNonRepeatingCharacter(str: string) returns (res: char)\n{\n    var n := str.Length;\n    // We'll use an array of 256 ints as a frequency map for all ASCII chars\n    var freq: array<int> := new int[256] (i => 0);\n\n    // First pass: count occurrences\n    var i := 0;\n    while i < n\n        invariant 0 <= i <= n\n        invariant forall j :: 0 <= j < i ==> 0 <= str[j] as int < 256\n        decreases n - i\n    {\n        var c := str[i];\n        freq[c as int] := freq[c as int] + 1;\n        i := i + 1;\n    }\n\n    // Second pass: find first non-repeating character\n    i := 0;\n    while i < n\n        invariant 0 <= i <= n\n        decreases n - i\n    {\n        var c := str[i];\n        if freq[c as int] == 1 {\n            res := c;\n            return;\n        }\n        i := i + 1;\n    }\n    res := ' '; // Return space if there is no non-repeated character\n}\n```\n", "dafny_code": "method firstNonRepeatingCharacter(str: string) returns (res: char)\n{\n    var n := str.Length;\n    // We'll use an array of 256 ints as a frequency map for all ASCII chars\n    var freq: array<int> := new int[256] (i => 0);\n\n    // First pass: count occurrences\n    var i := 0;\n    while i < n\n        invariant 0 <= i <= n\n        invariant forall j :: 0 <= j < i ==> 0 <= str[j] as int < 256\n        decreases n - i\n    {\n        var c := str[i];\n        freq[c as int] := freq[c as int] + 1;\n        i := i + 1;\n    }\n\n    // Second pass: find first non-repeating character\n    i := 0;\n    while i < n\n        invariant 0 <= i <= n\n        decreases n - i\n    {\n        var c := str[i];\n        if freq[c as int] == 1 {\n            res := c;\n            return;\n        }\n        i := i + 1;\n    }\n    res := ' '; // Return space if there is no non-repeated character\n}", "isVerified": false, "verification_bits": {"method": 1, "ensure": 0, "requires": 0, "function": 0, "lemma": 0, "predicate": 0, "invariant": 3, "assert_count": 0}}