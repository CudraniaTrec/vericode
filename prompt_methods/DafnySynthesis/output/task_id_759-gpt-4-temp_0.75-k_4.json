{"id": "759", "K": 4, "temperature": 0.75, "task_id": "759", "task_description": "Write a method in Dafny to check whether a given string is a decimal number with a precision of 2.", "model": "gpt-4", "response": "```dafny\n\nmethod isDecimal(str: string) returns (res: bool)\n{\n    // A valid decimal with precision 2 must have at least 4 characters: \"0.00\"\n    // There must be exactly one dot, and exactly two digits after the dot\n    if |str| < 4 {\n        res := false;\n        return;\n    }\n\n    // Find the dot position\n    var dotPos := -1;\n    var dotCount := 0;\n    var i := 0;\n    while i < |str|\n        decreases |str| - i\n    {\n        if str[i] == '.' {\n            dotCount := dotCount + 1;\n            if dotCount == 1 {\n                dotPos := i;\n            }\n        }\n        i := i + 1;\n    }\n\n    // There must be exactly one dot\n    if dotCount != 1 {\n        res := false;\n        return;\n    }\n\n    // There must be exactly two digits after the dot\n    if dotPos + 3 != |str| {\n        res := false;\n        return;\n    }\n\n    // All chars before dot must be digits\n    var j := 0;\n    while j < dotPos\n        decreases dotPos - j\n    {\n        if str[j] < '0' || str[j] > '9' {\n            res := false;\n            return;\n        }\n        j := j + 1;\n    }\n\n    // The two chars after the dot must be digits\n    if !(str[dotPos+1] >= '0' && str[dotPos+1] <= '9' && str[dotPos+2] >= '0' && str[dotPos+2] <= '9') {\n        res := false;\n        return;\n    }\n\n    res := true;\n}\n\n```", "dafny_code": "method isDecimal(str: string) returns (res: bool)\n{\n    // A valid decimal with precision 2 must have at least 4 characters: \"0.00\"\n    // There must be exactly one dot, and exactly two digits after the dot\n    if |str| < 4 {\n        res := false;\n        return;\n    }\n\n    // Find the dot position\n    var dotPos := -1;\n    var dotCount := 0;\n    var i := 0;\n    while i < |str|\n        decreases |str| - i\n    {\n        if str[i] == '.' {\n            dotCount := dotCount + 1;\n            if dotCount == 1 {\n                dotPos := i;\n            }\n        }\n        i := i + 1;\n    }\n\n    // There must be exactly one dot\n    if dotCount != 1 {\n        res := false;\n        return;\n    }\n\n    // There must be exactly two digits after the dot\n    if dotPos + 3 != |str| {\n        res := false;\n        return;\n    }\n\n    // All chars before dot must be digits\n    var j := 0;\n    while j < dotPos\n        decreases dotPos - j\n    {\n        if str[j] < '0' || str[j] > '9' {\n            res := false;\n            return;\n        }\n        j := j + 1;\n    }\n\n    // The two chars after the dot must be digits\n    if !(str[dotPos+1] >= '0' && str[dotPos+1] <= '9' && str[dotPos+2] >= '0' && str[dotPos+2] <= '9') {\n        res := false;\n        return;\n    }\n\n    res := true;\n}", "isVerified": true, "verification_bits": {"method": 1, "ensure": 0, "requires": 0, "function": 0, "lemma": 0, "predicate": 0, "invariant": 0, "assert_count": 0}}