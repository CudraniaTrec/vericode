{"id": "119", "K": 3, "temperature": 0.75, "task_id": "119", "task_description": "Write a method in Dafny to find the element that appears only once in a sorted array.", "model": "gpt-4", "response": "```dafny\n// Dafny Code\n\nmethod search(arr:array<int>) returns (res:int)\n  requires arr != null && arr.Length > 0\n  ensures exists i :: 0 <= i < arr.Length && (forall j :: 0 <= j < arr.Length && j != i ==> arr[i] != arr[j]) && res == arr[i]\n{\n  var n := arr.Length;\n  var l := 0;\n  var r := n - 1;\n\n  while l < r\n    invariant 0 <= l <= r < n\n    decreases r - l\n  {\n    var m := l + (r - l) / 2;\n\n    if m % 2 == 1 {\n      // ensure m is even for easier comparison\n      m := m - 1;\n    }\n\n    if arr[m] == arr[m+1] {\n      // the unique element is after this pair\n      l := m + 2;\n    } else {\n      // the unique element is at m or before\n      r := m;\n    }\n  }\n\n  res := arr[l];\n}\n```\nThis method uses binary search to locate the single element in a sorted array where all other elements appear exactly twice.", "dafny_code": "// Dafny Code\n\nmethod search(arr:array<int>) returns (res:int)\n  requires arr != null && arr.Length > 0\n  ensures exists i :: 0 <= i < arr.Length && (forall j :: 0 <= j < arr.Length && j != i ==> arr[i] != arr[j]) && res == arr[i]\n{\n  var n := arr.Length;\n  var l := 0;\n  var r := n - 1;\n\n  while l < r\n    invariant 0 <= l <= r < n\n    decreases r - l\n  {\n    var m := l + (r - l) / 2;\n\n    if m % 2 == 1 {\n      // ensure m is even for easier comparison\n      m := m - 1;\n    }\n\n    if arr[m] == arr[m+1] {\n      // the unique element is after this pair\n      l := m + 2;\n    } else {\n      // the unique element is at m or before\n      r := m;\n    }\n  }\n\n  res := arr[l];\n}", "isVerified": false, "verification_bits": {"method": 1, "ensure": 1, "requires": 1, "function": 0, "lemma": 0, "predicate": 0, "invariant": 1, "assert_count": 0}}