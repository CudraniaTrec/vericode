{"id": "131", "K": 3, "temperature": 0.75, "task_id": "131", "task_description": "Write a method in Dafny to reverse only the vowels of a given string (where y is not a vowel).", "model": "gpt-4", "response": "```dafny\n\nmethod reverseVowels(str: string) returns (vowels: string)\n{\n    // Helper function to check if a character is a vowel (a, e, i, o, u, A, E, I, O, U)\n    function method isVowel(c: char): bool\n    {\n        c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n        c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\n    }\n\n    var n := |str|;\n    var chars := new char[n];\n    // Copy input string to a mutable char array\n    var i := 0;\n    while i < n\n        invariant 0 <= i <= n\n        invariant chars[..i] == str[..i]\n    {\n        chars[i] := str[i];\n        i := i + 1;\n    }\n\n    // Collect indices of all vowels\n    var vowelIndices := new int[0];\n    i := 0;\n    while i < n\n        invariant 0 <= i <= n\n        invariant vowelIndices.Length <= i\n        decreases n - i\n    {\n        if isVowel(chars[i]) {\n            var len := vowelIndices.Length;\n            var temp := new int[len+1];\n            var j := 0;\n            while j < len\n                invariant 0 <= j <= len\n            {\n                temp[j] := vowelIndices[j];\n                j := j + 1;\n            }\n            temp[len] := i;\n            vowelIndices := temp;\n        }\n        i := i + 1;\n    }\n\n    // Reverse the vowels in-place\n    var left := 0;\n    var right := vowelIndices.Length - 1;\n    while left < right\n        invariant 0 <= left <= right+1 <= vowelIndices.Length\n    {\n        var li := vowelIndices[left];\n        var ri := vowelIndices[right];\n        var temp := chars[li];\n        chars[li] := chars[ri];\n        chars[ri] := temp;\n        left := left + 1;\n        right := right - 1;\n    }\n\n    // Build the result string\n    vowels := \"\";\n    i := 0;\n    while i < n\n        invariant 0 <= i <= n\n        invariant |vowels| == i\n    {\n        vowels := vowels + chars[i].ToString();\n        i := i + 1;\n    }\n}\n```\n", "dafny_code": "method reverseVowels(str: string) returns (vowels: string)\n{\n    // Helper function to check if a character is a vowel (a, e, i, o, u, A, E, I, O, U)\n    function method isVowel(c: char): bool\n    {\n        c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n        c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\n    }\n\n    var n := |str|;\n    var chars := new char[n];\n    // Copy input string to a mutable char array\n    var i := 0;\n    while i < n\n        invariant 0 <= i <= n\n        invariant chars[..i] == str[..i]\n    {\n        chars[i] := str[i];\n        i := i + 1;\n    }\n\n    // Collect indices of all vowels\n    var vowelIndices := new int[0];\n    i := 0;\n    while i < n\n        invariant 0 <= i <= n\n        invariant vowelIndices.Length <= i\n        decreases n - i\n    {\n        if isVowel(chars[i]) {\n            var len := vowelIndices.Length;\n            var temp := new int[len+1];\n            var j := 0;\n            while j < len\n                invariant 0 <= j <= len\n            {\n                temp[j] := vowelIndices[j];\n                j := j + 1;\n            }\n            temp[len] := i;\n            vowelIndices := temp;\n        }\n        i := i + 1;\n    }\n\n    // Reverse the vowels in-place\n    var left := 0;\n    var right := vowelIndices.Length - 1;\n    while left < right\n        invariant 0 <= left <= right+1 <= vowelIndices.Length\n    {\n        var li := vowelIndices[left];\n        var ri := vowelIndices[right];\n        var temp := chars[li];\n        chars[li] := chars[ri];\n        chars[ri] := temp;\n        left := left + 1;\n        right := right - 1;\n    }\n\n    // Build the result string\n    vowels := \"\";\n    i := 0;\n    while i < n\n        invariant 0 <= i <= n\n        invariant |vowels| == i\n    {\n        vowels := vowels + chars[i].ToString();\n        i := i + 1;\n    }\n}", "isVerified": false, "verification_bits": {"method": 2, "ensure": 0, "requires": 0, "function": 2, "lemma": 0, "predicate": 0, "invariant": 8, "assert_count": 0}}