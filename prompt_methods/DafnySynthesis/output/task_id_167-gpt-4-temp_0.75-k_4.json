{"id": "167", "K": 4, "temperature": 0.75, "task_id": "167", "task_description": "Write a method in Dafny to find the smallest power of 2 greater than or equal to n.", "model": "gpt-4", "response": "```dafny\n\n   //Dafny Code\nmethod nextPowerOf2(n:int) returns (res:int)\n    ensures res >= n\n    ensures res > 0\n    ensures forall k:int :: k > 0 && k < res ==> k < n || k & (k - 1) != 0 // k is not a power of 2 >= n and < res\n{\n    if n <= 0 {\n        res := 1;\n        return;\n    }\n    var x := n - 1;\n    x := x | (x >> 1);\n    x := x | (x >> 2);\n    x := x | (x >> 4);\n    x := x | (x >> 8);\n    x := x | (x >> 16);\n    x := x | (x >> 32); // For 64-bit ints, though Dafny uses unbounded int, this suffices up to huge numbers\n    res := x + 1;\n}\n\n```", "dafny_code": "//Dafny Code\nmethod nextPowerOf2(n:int) returns (res:int)\n    ensures res >= n\n    ensures res > 0\n    ensures forall k:int :: k > 0 && k < res ==> k < n || k & (k - 1) != 0 // k is not a power of 2 >= n and < res\n{\n    if n <= 0 {\n        res := 1;\n        return;\n    }\n    var x := n - 1;\n    x := x | (x >> 1);\n    x := x | (x >> 2);\n    x := x | (x >> 4);\n    x := x | (x >> 8);\n    x := x | (x >> 16);\n    x := x | (x >> 32); // For 64-bit ints, though Dafny uses unbounded int, this suffices up to huge numbers\n    res := x + 1;\n}", "isVerified": false, "verification_bits": {"method": 1, "ensure": 3, "requires": 0, "function": 0, "lemma": 0, "predicate": 0, "invariant": 0, "assert_count": 0}}