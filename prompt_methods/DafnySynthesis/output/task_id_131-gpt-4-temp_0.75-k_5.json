{"id": "131", "K": 5, "temperature": 0.75, "task_id": "131", "task_description": "Write a method in Dafny to reverse only the vowels of a given string (where y is not a vowel).", "model": "gpt-4", "response": "```dafny\n\nmethod reverseVowels(str: string) returns (vowels: string)\n{\n    // Helper function to check if a character is a vowel (case-insensitive, y is not a vowel)\n    function isVowel(c: char): bool\n    {\n        c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n        c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\n    }\n\n    var n := str.Length;\n    var arr := new char[n];\n    // Copy characters into arr\n    var i := 0;\n    while i < n\n        decreases n - i\n    {\n        arr[i] := str[i];\n        i := i + 1;\n    }\n\n    // Collect indices of vowels\n    var vowelIndices := new seq<int>(0);\n    var vowelChars := new seq<char>(0);\n    i := 0;\n    while i < n\n        decreases n - i\n    {\n        if isVowel(str[i]) {\n            vowelIndices := vowelIndices + [i];\n            vowelChars := vowelChars + [str[i]];\n        }\n        i := i + 1;\n    }\n\n    // Reverse the sequence of vowels\n    var vlen := |vowelIndices|;\n    i := 0;\n    while i < vlen\n        decreases vlen - i\n    {\n        arr[vowelIndices[i]] := vowelChars[vlen - 1 - i];\n        i := i + 1;\n    }\n\n    // Build the output string\n    vowels := \"\";\n    i := 0;\n    while i < n\n        decreases n - i\n    {\n        vowels := vowels + arr[i].ToString();\n        i := i + 1;\n    }\n}\n\n```", "dafny_code": "method reverseVowels(str: string) returns (vowels: string)\n{\n    // Helper function to check if a character is a vowel (case-insensitive, y is not a vowel)\n    function isVowel(c: char): bool\n    {\n        c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n        c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\n    }\n\n    var n := str.Length;\n    var arr := new char[n];\n    // Copy characters into arr\n    var i := 0;\n    while i < n\n        decreases n - i\n    {\n        arr[i] := str[i];\n        i := i + 1;\n    }\n\n    // Collect indices of vowels\n    var vowelIndices := new seq<int>(0);\n    var vowelChars := new seq<char>(0);\n    i := 0;\n    while i < n\n        decreases n - i\n    {\n        if isVowel(str[i]) {\n            vowelIndices := vowelIndices + [i];\n            vowelChars := vowelChars + [str[i]];\n        }\n        i := i + 1;\n    }\n\n    // Reverse the sequence of vowels\n    var vlen := |vowelIndices|;\n    i := 0;\n    while i < vlen\n        decreases vlen - i\n    {\n        arr[vowelIndices[i]] := vowelChars[vlen - 1 - i];\n        i := i + 1;\n    }\n\n    // Build the output string\n    vowels := \"\";\n    i := 0;\n    while i < n\n        decreases n - i\n    {\n        vowels := vowels + arr[i].ToString();\n        i := i + 1;\n    }\n}", "isVerified": false, "verification_bits": {"method": 1, "ensure": 0, "requires": 0, "function": 2, "lemma": 0, "predicate": 0, "invariant": 0, "assert_count": 0}}