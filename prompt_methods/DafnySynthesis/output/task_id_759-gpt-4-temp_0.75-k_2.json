{"id": "759", "K": 2, "temperature": 0.75, "task_id": "759", "task_description": "Write a method in Dafny to check whether a given string is a decimal number with a precision of 2.", "model": "gpt-4", "response": "```dafny\n\n//Dafny Code\n\nmethod isDecimal(str:string) returns (res:bool)\n{\n    // A valid decimal with precision 2 has the form d+.dd, where d is a digit\n    // So, at least 4 chars: \"0.00\"\n    if str.Length < 4 {\n        res := false;\n        return;\n    }\n\n    var dotPos := -1;\n    // Find the position of the dot\n    var i := 0;\n    while i < str.Length\n        decreases str.Length - i\n    {\n        if str[i] == '.' {\n            dotPos := i;\n            break;\n        }\n        i := i + 1;\n    }\n\n    // There must be exactly one dot, and it can't be the first or last or next to last char\n    if dotPos == -1 || dotPos == 0 || dotPos == str.Length - 1 || dotPos != str.Length - 3 {\n        res := false;\n        return;\n    }\n\n    // Check all chars before dot are digits\n    var j := 0;\n    while j < dotPos\n        decreases dotPos - j\n    {\n        if str[j] < '0' || str[j] > '9' {\n            res := false;\n            return;\n        }\n        j := j + 1;\n    }\n\n    // Check two digits after dot\n    if !(str[dotPos+1] >= '0' && str[dotPos+1] <= '9' && str[dotPos+2] >= '0' && str[dotPos+2] <= '9') {\n        res := false;\n        return;\n    }\n\n    res := true;\n}\n\n```", "dafny_code": "//Dafny Code\n\nmethod isDecimal(str:string) returns (res:bool)\n{\n    // A valid decimal with precision 2 has the form d+.dd, where d is a digit\n    // So, at least 4 chars: \"0.00\"\n    if str.Length < 4 {\n        res := false;\n        return;\n    }\n\n    var dotPos := -1;\n    // Find the position of the dot\n    var i := 0;\n    while i < str.Length\n        decreases str.Length - i\n    {\n        if str[i] == '.' {\n            dotPos := i;\n            break;\n        }\n        i := i + 1;\n    }\n\n    // There must be exactly one dot, and it can't be the first or last or next to last char\n    if dotPos == -1 || dotPos == 0 || dotPos == str.Length - 1 || dotPos != str.Length - 3 {\n        res := false;\n        return;\n    }\n\n    // Check all chars before dot are digits\n    var j := 0;\n    while j < dotPos\n        decreases dotPos - j\n    {\n        if str[j] < '0' || str[j] > '9' {\n            res := false;\n            return;\n        }\n        j := j + 1;\n    }\n\n    // Check two digits after dot\n    if !(str[dotPos+1] >= '0' && str[dotPos+1] <= '9' && str[dotPos+2] >= '0' && str[dotPos+2] <= '9') {\n        res := false;\n        return;\n    }\n\n    res := true;\n}", "isVerified": false, "verification_bits": {"method": 1, "ensure": 0, "requires": 0, "function": 0, "lemma": 0, "predicate": 0, "invariant": 0, "assert_count": 0}}