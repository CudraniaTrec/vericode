{"id": "167", "K": 3, "temperature": 0.75, "task_id": "167", "task_description": "Write a method in Dafny to find the smallest power of 2 greater than or equal to n.", "model": "gpt-4", "response": "```dafny\n\nmethod nextPowerOf2(n:int) returns (res:int)\n  ensures res >= n\n  ensures res > 0\n  ensures exists k:int :: k >= 0 && res == 1 << k\n  ensures forall k:int :: k >= 0 && (1 << k) >= n ==> res <= 1 << k\n{\n  if n <= 1 {\n    res := 1;\n    return;\n  }\n  var x := n - 1;\n  var bits := 1;\n  while (x >> bits) > 0\n    invariant x >= 0\n    invariant bits >= 1\n    decreases 32 - bits\n  {\n    x := x | (x >> bits);\n    bits := bits * 2;\n  }\n  res := x + 1;\n}\n\n```", "dafny_code": "method nextPowerOf2(n:int) returns (res:int)\n  ensures res >= n\n  ensures res > 0\n  ensures exists k:int :: k >= 0 && res == 1 << k\n  ensures forall k:int :: k >= 0 && (1 << k) >= n ==> res <= 1 << k\n{\n  if n <= 1 {\n    res := 1;\n    return;\n  }\n  var x := n - 1;\n  var bits := 1;\n  while (x >> bits) > 0\n    invariant x >= 0\n    invariant bits >= 1\n    decreases 32 - bits\n  {\n    x := x | (x >> bits);\n    bits := bits * 2;\n  }\n  res := x + 1;\n}", "isVerified": false, "verification_bits": {"method": 1, "ensure": 4, "requires": 0, "function": 0, "lemma": 0, "predicate": 0, "invariant": 2, "assert_count": 0}}