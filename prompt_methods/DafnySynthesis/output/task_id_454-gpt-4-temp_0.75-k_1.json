{"id": "454", "K": 1, "temperature": 0.75, "task_id": "454", "task_description": "Write a method in Dafny that matches a word containing 'z'.", "model": "gpt-4", "response": "```dafny\n\nmethod textMatchWordz(text:string) returns (res:bool)\n{\n    // A \"word\" is a maximal sequence of letters (a-z, A-Z)\n    // We want to check if any word contains a 'z' (lowercase only)\n\n    var i := 0;\n    var n := text.Length;\n    res := false;\n\n    while i < n\n        decreases n - i\n    {\n        // Skip non-letters\n        while i < n && !(text[i] >= 'a' && text[i] <= 'z' || text[i] >= 'A' && text[i] <= 'Z')\n            decreases n - i\n        {\n            i := i + 1;\n        }\n\n        if i >= n {\n            break;\n        }\n\n        // Start of a word\n        var hasZ := false;\n        while i < n && (text[i] >= 'a' && text[i] <= 'z' || text[i] >= 'A' && text[i] <= 'Z')\n            decreases n - i\n        {\n            if text[i] == 'z' {\n                hasZ := true;\n            }\n            i := i + 1;\n        }\n        if hasZ {\n            res := true;\n            return;\n        }\n    }\n}\n\n```", "dafny_code": "method textMatchWordz(text:string) returns (res:bool)\n{\n    // A \"word\" is a maximal sequence of letters (a-z, A-Z)\n    // We want to check if any word contains a 'z' (lowercase only)\n\n    var i := 0;\n    var n := text.Length;\n    res := false;\n\n    while i < n\n        decreases n - i\n    {\n        // Skip non-letters\n        while i < n && !(text[i] >= 'a' && text[i] <= 'z' || text[i] >= 'A' && text[i] <= 'Z')\n            decreases n - i\n        {\n            i := i + 1;\n        }\n\n        if i >= n {\n            break;\n        }\n\n        // Start of a word\n        var hasZ := false;\n        while i < n && (text[i] >= 'a' && text[i] <= 'z' || text[i] >= 'A' && text[i] <= 'Z')\n            decreases n - i\n        {\n            if text[i] == 'z' {\n                hasZ := true;\n            }\n            i := i + 1;\n        }\n        if hasZ {\n            res := true;\n            return;\n        }\n    }\n}", "isVerified": true, "verification_bits": {"method": 1, "ensure": 0, "requires": 0, "function": 0, "lemma": 0, "predicate": 0, "invariant": 0, "assert_count": 0}}