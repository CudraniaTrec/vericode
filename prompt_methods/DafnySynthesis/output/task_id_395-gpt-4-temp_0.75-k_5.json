{"id": "395", "K": 5, "temperature": 0.75, "task_id": "395", "task_description": "Write a method in Dafny to find the first non-repeated character in a given string.", "model": "gpt-4", "response": "```dafny\n\nmethod firstNonRepeatingCharacter(str:string) returns (res:char)\n{\n    var n := |str|;\n    var counts := map c:char | true :: 0;\n\n    // First pass: count each character\n    var i := 0;\n    while i < n\n        invariant 0 <= i <= n\n        invariant forall c:char :: (forall j:int :: 0 <= j < i ==> str[j] == c) ==> counts[c] >= 1\n    {\n        var c := str[i];\n        if counts[c] == 0 {\n            counts := counts[c := 1];\n        } else {\n            counts := counts[c := counts[c] + 1];\n        }\n        i := i + 1;\n    }\n\n    // Second pass: find first character with count 1\n    i := 0;\n    var found := false;\n    while i < n\n        invariant 0 <= i <= n\n        invariant !found ==> forall j:int :: 0 <= j < i ==> counts[str[j]] != 1\n    {\n        var c := str[i];\n        if counts[c] == 1 {\n            res := c;\n            found := true;\n            break;\n        }\n        i := i + 1;\n    }\n    if !found {\n        res := ' ';\n    }\n}\n\n```", "dafny_code": "method firstNonRepeatingCharacter(str:string) returns (res:char)\n{\n    var n := |str|;\n    var counts := map c:char | true :: 0;\n\n    // First pass: count each character\n    var i := 0;\n    while i < n\n        invariant 0 <= i <= n\n        invariant forall c:char :: (forall j:int :: 0 <= j < i ==> str[j] == c) ==> counts[c] >= 1\n    {\n        var c := str[i];\n        if counts[c] == 0 {\n            counts := counts[c := 1];\n        } else {\n            counts := counts[c := counts[c] + 1];\n        }\n        i := i + 1;\n    }\n\n    // Second pass: find first character with count 1\n    i := 0;\n    var found := false;\n    while i < n\n        invariant 0 <= i <= n\n        invariant !found ==> forall j:int :: 0 <= j < i ==> counts[str[j]] != 1\n    {\n        var c := str[i];\n        if counts[c] == 1 {\n            res := c;\n            found := true;\n            break;\n        }\n        i := i + 1;\n    }\n    if !found {\n        res := ' ';\n    }\n}", "isVerified": false, "verification_bits": {"method": 1, "ensure": 0, "requires": 0, "function": 0, "lemma": 0, "predicate": 0, "invariant": 4, "assert_count": 0}}