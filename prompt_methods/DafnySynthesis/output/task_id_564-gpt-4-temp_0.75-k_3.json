{"id": "564", "K": 3, "temperature": 0.75, "task_id": "564", "task_description": "Write a method in Dafny which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.", "model": "gpt-4", "response": "```dafny\n\nmethod countPairs(arr: array<int>, n: int) returns (res: int)\n    requires arr != null && arr.Length == n\n    ensures res >= 0\n{\n    // Count total unordered pairs\n    var total := n * (n - 1) / 2;\n\n    // Map from int to occurrence count\n    var m := map k: int {:trigger true} | false :: 0;\n    var distinct := set i | 0 <= i < n :: arr[i];\n    // Build counts\n    var counts := new int[n];\n    // Use a dictionary-like approach with lists, for Dafny\n    var uniq := new int[n];\n    var uniqCount := 0;\n    for i := 0 to n-1 {\n        var found := false;\n        var idx := 0;\n        while idx < uniqCount {\n            if uniq[idx] == arr[i] {\n                found := true;\n                break;\n            }\n            idx := idx + 1;\n        }\n        if found {\n            counts[idx] := counts[idx] + 1;\n        } else {\n            uniq[uniqCount] := arr[i];\n            counts[uniqCount] := 1;\n            uniqCount := uniqCount + 1;\n        }\n    }\n    // Subtract number of pairs with same elements\n    var same := 0;\n    for i := 0 to uniqCount-1 {\n        var c := counts[i];\n        same := same + c * (c - 1) / 2;\n    }\n    res := total - same;\n}\n\n```", "dafny_code": "method countPairs(arr: array<int>, n: int) returns (res: int)\n    requires arr != null && arr.Length == n\n    ensures res >= 0\n{\n    // Count total unordered pairs\n    var total := n * (n - 1) / 2;\n\n    // Map from int to occurrence count\n    var m := map k: int {:trigger true} | false :: 0;\n    var distinct := set i | 0 <= i < n :: arr[i];\n    // Build counts\n    var counts := new int[n];\n    // Use a dictionary-like approach with lists, for Dafny\n    var uniq := new int[n];\n    var uniqCount := 0;\n    for i := 0 to n-1 {\n        var found := false;\n        var idx := 0;\n        while idx < uniqCount {\n            if uniq[idx] == arr[i] {\n                found := true;\n                break;\n            }\n            idx := idx + 1;\n        }\n        if found {\n            counts[idx] := counts[idx] + 1;\n        } else {\n            uniq[uniqCount] := arr[i];\n            counts[uniqCount] := 1;\n            uniqCount := uniqCount + 1;\n        }\n    }\n    // Subtract number of pairs with same elements\n    var same := 0;\n    for i := 0 to uniqCount-1 {\n        var c := counts[i];\n        same := same + c * (c - 1) / 2;\n    }\n    res := total - same;\n}", "isVerified": false, "verification_bits": {"method": 1, "ensure": 1, "requires": 1, "function": 0, "lemma": 0, "predicate": 0, "invariant": 0, "assert_count": 0}}