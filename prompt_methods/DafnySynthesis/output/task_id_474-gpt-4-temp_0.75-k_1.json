{"id": "474", "K": 1, "temperature": 0.75, "task_id": "474", "task_description": "Write a method in Dafny to replace characters in a string.", "model": "gpt-4", "response": "```dafny\n\n//Dafny Code\n\nmethod replaceChar(str: string, oldChar: char, newChar: char) returns (res: string)\n{\n    var n := str.Length;\n    var builder := new seq<char>[];\n    var i := 0;\n    while i < n\n        invariant 0 <= i <= n\n        invariant builder.Length == i\n        invariant forall j :: 0 <= j < i ==> (builder[j] == (if str[j] == oldChar then newChar else str[j]))\n    {\n        if str[i] == oldChar {\n            builder := builder + [newChar];\n        } else {\n            builder := builder + [str[i]];\n        }\n        i := i + 1;\n    }\n    res := string(builder);\n}\n\n```", "dafny_code": "//Dafny Code\n\nmethod replaceChar(str: string, oldChar: char, newChar: char) returns (res: string)\n{\n    var n := str.Length;\n    var builder := new seq<char>[];\n    var i := 0;\n    while i < n\n        invariant 0 <= i <= n\n        invariant builder.Length == i\n        invariant forall j :: 0 <= j < i ==> (builder[j] == (if str[j] == oldChar then newChar else str[j]))\n    {\n        if str[i] == oldChar {\n            builder := builder + [newChar];\n        } else {\n            builder := builder + [str[i]];\n        }\n        i := i + 1;\n    }\n    res := string(builder);\n}", "isVerified": false, "verification_bits": {"method": 1, "ensure": 0, "requires": 0, "function": 0, "lemma": 0, "predicate": 0, "invariant": 3, "assert_count": 0}}