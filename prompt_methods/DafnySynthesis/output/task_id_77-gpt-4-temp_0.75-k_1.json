{"id": "77", "K": 1, "temperature": 0.75, "task_id": "77", "task_description": "Write a method in Dafny to find whether a number is divisible by 11.", "model": "gpt-4", "response": "```dafny\n\n   //Dafny Code\n\nmethod isDiff(n:int) returns (res:bool)\n{\n    var num := if n < 0 then -n else n; // Work with non-negative numbers\n    var sumOdd := 0;\n    var sumEven := 0;\n    var pos := 0;\n    var temp := num;\n    while temp > 0\n        decreases temp\n    {\n        var digit := temp % 10;\n        if pos % 2 == 0 {\n            sumOdd := sumOdd + digit;\n        } else {\n            sumEven := sumEven + digit;\n        }\n        temp := temp / 10;\n        pos := pos + 1;\n    }\n    res := ((sumOdd - sumEven) % 11 == 0);\n}\n```\nThis method implements the rule for divisibility by 11: the difference between the sum of the digits in odd positions and the sum of the digits in even positions is divisible by 11.", "dafny_code": "//Dafny Code\n\nmethod isDiff(n:int) returns (res:bool)\n{\n    var num := if n < 0 then -n else n; // Work with non-negative numbers\n    var sumOdd := 0;\n    var sumEven := 0;\n    var pos := 0;\n    var temp := num;\n    while temp > 0\n        decreases temp\n    {\n        var digit := temp % 10;\n        if pos % 2 == 0 {\n            sumOdd := sumOdd + digit;\n        } else {\n            sumEven := sumEven + digit;\n        }\n        temp := temp / 10;\n        pos := pos + 1;\n    }\n    res := ((sumOdd - sumEven) % 11 == 0);\n}", "isVerified": true, "verification_bits": {"method": 1, "ensure": 0, "requires": 0, "function": 0, "lemma": 0, "predicate": 0, "invariant": 0, "assert_count": 0}}